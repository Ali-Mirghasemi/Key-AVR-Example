;/*
; * main.c
; *
; * Created: 6/28/2021 5:08:43 AM
; * Author: MrCrazy
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "Key.h"
;#include "KeyPort.h"

	.DSEG
;
;#define LED         DDRA
;#define LED0        PORTA.0
;#define LED1        PORTA.1
;#define LED2        PORTA.2
;
;const Key_PinConfig keyConfig1 = {
;    GPIOD, GPIO_PIN_0
;};
;const Key_PinConfig keyConfig2 = {
;    GPIOD, GPIO_PIN_1
;};
;const Key_PinConfig keyConfig3 = {
;    GPIOD, GPIO_PIN_2
;};
;
;
;// Callbacks
;#if KEY_MULTI_CALLBACK
;    Key_HandleStatus Key1_onPressed(Key* key, Key_State state);
;
;    Key_HandleStatus Key2_onPressed(Key* key, Key_State state);
;    Key_HandleStatus Key2_onReleased(Key* key, Key_State state);
;
;    Key_HandleStatus Key3_onPressed(Key* key, Key_State state);
;    Key_HandleStatus Key3_onReleased(Key* key, Key_State state);
;    Key_HandleStatus Key3_onHold(Key* key, Key_State state);
;#else
;    Key_HandleStatus Key1_onChange(Key* key, Key_State state);
;    Key_HandleStatus Key2_onChange(Key* key, Key_State state);
;    Key_HandleStatus Key3_onChange(Key* key, Key_State state);
;#endif
;
;static Key key1;
;static Key key2;
;static Key key3;
;
;void main(void)
; 0000 0031 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0032 
; 0000 0033     LED = 0xFF;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0034     LED0 = 0;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0035     LED1 = 0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0036     LED2 = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0037 
; 0000 0038     // Timer/Counter 1 initialization
; 0000 0039     // Clock source: System Clock
; 0000 003A     // Clock value: 1000.000 kHz
; 0000 003B     // Mode: CTC top=OCR1A
; 0000 003C     // OC1A output: Disconnected
; 0000 003D     // OC1B output: Disconnected
; 0000 003E     // Noise Canceler: Off
; 0000 003F     // Input Capture on Falling Edge
; 0000 0040     // Timer Period: 50 ms
; 0000 0041     // Timer1 Overflow Interrupt: Off
; 0000 0042     // Input Capture Interrupt: Off
; 0000 0043     // Compare A Match Interrupt: On
; 0000 0044     // Compare B Match Interrupt: Off
; 0000 0045     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0046     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0047     TCNT1H=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0048     TCNT1L=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0049     ICR1H=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 004A     ICR1L=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004B     OCR1AH=0xC3;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004C     OCR1AL=0x4F;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 004D     OCR1BH=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004E     OCR1BL=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004F 
; 0000 0050     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0051     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0052 
; 0000 0053 
; 0000 0054     Key_init(&keyDriver);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0055     Key_add(&key1, &keyConfig1);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0056     Key_add(&key2, &keyConfig2);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0057     Key_add(&key3, &keyConfig3);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0058 #if KEY_MULTI_CALLBACK
; 0000 0059     Key_onPressed(&key1, Key1_onPressed);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 005A 
; 0000 005B     Key_onPressed(&key2, Key2_onPressed);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005C     Key_onReleased(&key2, Key2_onReleased);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005D 
; 0000 005E     Key_onPressed(&key3, Key3_onPressed);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005F     Key_onReleased(&key3, Key3_onReleased);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0060     Key_onHold(&key3, Key3_onHold);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0061 #else
; 0000 0062     Key_onChange(&key1, Key1_onChange);
; 0000 0063     Key_onChange(&key2, Key2_onChange);
; 0000 0064     Key_onChange(&key3, Key3_onChange);
; 0000 0065 #endif
; 0000 0066 
; 0000 0067     // Global enable interrupts
; 0000 0068     #asm("sei")
;PCODE: $00000052 VOL: 0
	sei
;PCODE: $00000053 VOL: 0
; 0000 0069 
; 0000 006A while (1)
;PCODE: $00000054 VOL: 0
; 0000 006B     {
; 0000 006C     // Please write your application code here
; 0000 006D 
; 0000 006E     }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006F }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0072 {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0073     Key_irq();
;PCODE: $0000005C VOL: 0
; 0000 0074 }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;// Callbacks
;#if KEY_MULTI_CALLBACK
;Key_HandleStatus Key1_onPressed(Key* key, Key_State state) {
; 0000 0078 Key_HandleStatus Key1_onPressed(Key* key, Key_State state) {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0079     LED0 = !LED0;
;PCODE: $00000062 VOL: 0
;	*key -> Y+1
;	state -> Y+0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 007A     return Key_Handled;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007B }
;PCODE: $00000070 VOL: 0
;
;Key_HandleStatus Key2_onPressed(Key* key, Key_State state) {
; 0000 007D Key_HandleStatus Key2_onPressed(Key* key, Key_State state) {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 007E     LED1 = 1;
;PCODE: $00000073 VOL: 0
;	*key -> Y+1
;	state -> Y+0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 007F     return Key_NotHandled;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0080 }
;PCODE: $00000079 VOL: 0
;Key_HandleStatus Key2_onReleased(Key* key, Key_State state) {
; 0000 0081 Key_HandleStatus Key2_onReleased(Key* key, Key_State state) {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0082     LED1 = 0;
;PCODE: $0000007C VOL: 0
;	*key -> Y+1
;	state -> Y+0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0083     return Key_Handled;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0084 }
;PCODE: $00000082 VOL: 0
;
;Key_HandleStatus Key3_onPressed(Key* key, Key_State state) {
; 0000 0086 Key_HandleStatus Key3_onPressed(Key* key, Key_State state) {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0087     LED2 = 1;
;PCODE: $00000085 VOL: 0
;	*key -> Y+1
;	state -> Y+0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0088     return Key_NotHandled;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0089 }
;PCODE: $0000008B VOL: 0
;Key_HandleStatus Key3_onReleased(Key* key, Key_State state) {
; 0000 008A Key_HandleStatus Key3_onReleased(Key* key, Key_State state) {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 008B     LED2 = 0;
;PCODE: $0000008E VOL: 0
;	*key -> Y+1
;	state -> Y+0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 008C     return Key_NotHandled;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008D }
;PCODE: $00000094 VOL: 0
;Key_HandleStatus Key3_onHold(Key* key, Key_State state) {
; 0000 008E Key_HandleStatus Key3_onHold(Key* key, Key_State state) {
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 008F     LED2 = !LED2;
;PCODE: $00000097 VOL: 0
;	*key -> Y+1
;	state -> Y+0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0090     return Key_NotHandled;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0091 }
;PCODE: $000000A5 VOL: 0
;#else
;Key_HandleStatus Key1_onChange(Key* key, Key_State state) {
;
;}
;Key_HandleStatus Key2_onChange(Key* key, Key_State state) {
;
;}
;Key_HandleStatus Key3_onChange(Key* key, Key_State state) {
;
;}
;#endif
;
